<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft™ Accounting. Sales tax specification.</title>
  </properties>

  <body>

    <!-- The body of the document contains a number of sections -->
    <section name="Beigesoft™ Accounting. Sales tax specification.">

      <h5>Sales taxes common.</h5>

      <p>Sales taxes imposed on the buyer that seller must collect and pay.
        This is in case when buyer that bought goods/service "is in the country/state where this sales taxes must be paid".
        Foreigners travelers can refund sales taxes when they leaves the country. E-Commerce is still the growing sphere business that often dials with foreigner buyers that bought goods in a WEB-shop
        and have delivered them by mail. In that case overseas (foreigner) buyers must not pay "foreign" sales taxes.
        To implements this logic DebtorCreditor has isForeigner property.
        If DebtorCreditor is foreigner then sales taxes will be omitted for both sales (foreigner buyers) and purchase (foreigner vendors).
        If you bought a merchandise from overseas then you have not to pay "foreign" sales taxes,
        but you usually have to pay "native" sales taxes as if you bought this merchandise from the nearest shop.
        If vendor in purchase invoice is marked as "foreigner" then sales taxes (native) will be omitted. 
        Services Utl(Purchase/Sales)GoodsServiceLine/Prc(Purchase/Sales)(Invoice/Return)(Service)LineSave implements "omitting taxes if customer/vendor is foreign".
      </p>
      
      <h5>Tax calculation methods.</h5>
      <p>There are two calculation methods - tax due on a transaction on an item or an invoice basis.
        These methods give different results:
<pre style="white-space: pre-wrap;">
round(2.244 + 2.244) != round(2.244) + round(2.244);
4.49 != 4.48;
</pre>
        To implements this AccSettings has property "salTaxIsInvoiceBase" of type Boolean, default false (item basis).
      </p>
      <p>>
        Common rounding method is Half-Up to the cent (minimal currency unit).
        There are laws that demand additional actions, e.g. rip decimal places to 3 before rounding.
        For example:
<pre style="white-space: pre-wrap;">
price = 4.83
tax rate = 9%
tax calculation:
step#1: 4.83 * 0.09 = 0.4347
step#2: ripDecPl(0.4347, 3) = 0.434
step#3: round(0.434, 2) = 0.43

* as you can see without step#2 result will be different: round(0.4347, 2) = 0.44
</pre>
        To implements this AccSettings has property "salTaxRipDecPl" of type Integer, 0 means no need to rip.
        To implements sales tax rounding mode AccSettings has property "salTaxRoundMode" of type java.math.RoundingMode.
        Beige-Accounting uses AccSettings.pricePrecision as number of decimal places for rounding tax.
      </p>

      <h5>Tax due WHEN methods.</h5>
      <p>There are two WHEN methods - cash and accrual. Cash method is seldom used, it is "headacheful" method.
        Beigesoft™ Accounting has implemented both these methods.
      </p>

      <h5>Base and accounting data models.</h5>
      <p>Account itsId="SALES_TAX_PAYABLE", name="Sales Tax payable", normalBalanceType=CREDIT itsNumber="2310"
      Subaccounts - Tax</p>
      <p>Account itsId="SALES_TAX_RECIVABLE", name="Sales Tax recivable", normalBalanceType=DEBIT itsNumber="1310"
      Subaccounts - Tax</p>
      <p>Persistable model Tax consist of:
        <ul>
          <li>Subaccount fields  implements IHasTypeCode.</li>
          <li>expense - Expense not null</li>
          <li>itsPercentage - BigDecimal not null</li>
          <li>plusAmount - BigDecimal not null</li>
          <li>dueMethod - EDueMethod ACCURAL/CASH not null</li>
          <li>itsType - ETaxType INCOME_TAX/SALES_TAX_INITEM/SALES_TAX_OUTITEM/EMPLOYMENT_TAX_EMPLOYEE/EMPLOYMENT_TAX_EMPLOYER/OTHER_TAX, not null</li>
        </ul>
        constTypeCode = 2003
      </p>
      <p>Persistable model TaxUsed:
        <ul>
          <li>ASubaccountUsed fields</li>
          <li>subaccount - Tax, not null</li>
        </ul>
      </p>
      <p>Persistable model InvItemTaxCategory (goods or service tax category):
        <ul>
          <li>APersistableBaseHasName fields</li>
          <li>itsVersion - Version, changed time algorithm cause check dirty of
            calculated from it (derived) records</li>
          <li>List(InvItemTaxCategoryLine) taxes</li>
          <li>taxesDescription - String , uneditable e.g. "NY Sales Tax 10%"</li>
        </ul>
        This model used to assign tax or set of taxes for an goods or service e.g. "NY sales tax 6%"
        for pizza hot. 
      </p>
      <p>Persistable model InvItemTaxCategoryLine:
        <ul>
          <li>APersistableBaseHasName fields</li>
          <li>itsVersion - Version, changed time algorithm cause check dirty of
            calculated from it (derived) records</li>
          <li>itsOwner - InvItemTaxCategory, Not Null</li>
          <li>tax - Tax, Not Null</li>
          <li>itsPercentage - BigDecimal not null</li>
        </ul>
      </p>
      <p>Persistable model InvItem additionally consist of:
        <ul>
          <li>taxCategory - InvItemTaxCategory, nullable.</li>
        </ul>
      </p>
      <p>Persistable model PurchaseInvoice additionally consist of:
        <ul>
          <li>taxesLines - List&lt;PurchaseInvoiceTaxLine&gt; list of summary sales taxes (if exists)</li>
        </ul>
      </p>
      <p>Persistable model ADocTaxLine consist of:
        <ul>
          <li>APersistableBase fields</li>
          <li>itsVersion - Long autoincrement algorithm</li>
          <li>reversedId - Long if reversed</li>
          <li>tax - Tax, not null</li>
          <li>itsTotal - BigDecimal, not null</li>
        </ul>
      </p>
      <p>Persistable model ADocTaxLineFc consist of:
        <ul>
          <li>ADocTaxLine fields</li>
          <li>foreignTotalTaxes - BigDecimal,Total tax in foreign currency, if used, in case of domestic sales/purchases (if law allows it)</li>
        </ul>
      </p>
      <p>Persistable model PurchaseInvoiceTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - PurchaseInvoice, not null</li>
          <li>taxableInvBas - BigDecimal, not null, it's 0 if item basis otherwise taxable amount for invoice basis.</li>
          <li>taxableInvBasFc - BigDecimal, not null, it's 0 if item basis otherwise taxable amount in foreign currency for invoice basis.</li>
        </ul>
        This model holds total tax amount for whole document for both item and invoice basis methods.
      </p>
      <p>Persistable model SalesInvoiceTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - SalesInvoice, not null</li>
          <li>taxableInvBas - BigDecimal, not null, it's 0 if item basis otherwise taxable amount for invoice basis.</li>
          <li>taxableInvBasFc - BigDecimal, not null, it's 0 if item basis otherwise taxable amount in foreign currency for invoice basis.</li>
        </ul>
        This model holds total tax amount for whole document for both item and invoice basis methods.
      </p>
      
      <h5>SQL services that make accounting entries:</h5>
      Method "PurInvSalTaxSelfDeductingDbtAccrual":
      "PurchaseInvoice, Debit SalesTaxFromPurchase per Tax."
      Accounting entries source: accounting/journalEntries/PurInvSalTaxSelfDeductingDbtAccrual.sql:
      <pre style="white-space: pre-wrap;">
select 1 as SOURCETYPE, PURCHASEINVOICE.:IDNAME as SOURCEID, PURCHASEINVOICE.ITSDATE,
'SalesTaxFromPurchase' as ACCDEBIT, 2003 as SUBACCDEBITTYPE, TAX.ITSID as SUBACCDEBITID, TAX.ITSNAME as SUBACCDEBIT, sum(PURCHASEINVOICETAXLINE.ITSTOTAL) as DEBIT,
null as ACCCREDIT, null as SUBACCCREDITTYPE, null as SUBACCCREDITID, null as SUBACCCREDIT, 0 as CREDIT
from PURCHASEINVOICETAXLINE
join PURCHASEINVOICE on PURCHASEINVOICE.ITSID = PURCHASEINVOICETAXLINE.ITSOWNER
join TAX on TAX.ITSID = PURCHASEINVOICETAXLINE.TAX
where PURCHASEINVOICETAXLINE.REVERSEDID is null and PURCHASEINVOICE.REVERSEDID is null and HASMADEACCENTRIES = 0 and TAX.ITSTYPE in (1,2) and TAX.DUEMETHOD=0 :WHEREADD
group by SOURCETYPE, SOURCEID, ITSDATE, ACCDEBIT, SUBACCDEBITTYPE, SUBACCDEBITID, SUBACCDEBIT, ACCCREDIT, SUBACCCREDITTYPE, SUBACCCREDITID, SUBACCCREDIT
      </pre>

      <p>Persistable model SalesInvoiceTaxLine consist of:
        <ul>
          <li>ADocTaxLine fields</li>
          <li>itsOwner - SalesInvoice, not null</li>
        </ul>
      </p>
      Method "SalInvSalTaxPayCrdtAccrual":
      "SalesInvoice, Credit SalesTaxPay per Tax."
      Accounting entries source: accounting/journalEntries/SalInvSalTaxPayCrdtAccrual.sql:
      <pre style="white-space: pre-wrap;">
select 2 as SOURCETYPE, SALESINVOICE.:IDNAME as SOURCEID, SALESINVOICE.ITSDATE,
null as ACCDEBIT, null as SUBACCDEBITTYPE, null as SUBACCDEBITID, null as SUBACCDEBIT, 0 as DEBIT,
'SalesTaxPay' as ACCCREDIT, 2003 as SUBACCCREDITTYPE, TAX.ITSID as SUBACCCREDITID, TAX.ITSNAME as SUBACCCREDIT, sum(SALESINVOICETAXLINE.ITSTOTAL) as CREDIT
from SALESINVOICETAXLINE
join SALESINVOICE on SALESINVOICE.ITSID = SALESINVOICETAXLINE.ITSOWNER
join TAX on TAX.ITSID = SALESINVOICETAXLINE.TAX
where SALESINVOICETAXLINE.REVERSEDID is null and SALESINVOICE.REVERSEDID is null and HASMADEACCENTRIES = 0 and TAX.ITSTYPE in (1,2) and TAX.DUEMETHOD = 0 :WHEREADD
group by SOURCETYPE, SOURCEID, ITSDATE, ACCDEBIT, SUBACCDEBITTYPE, SUBACCDEBITID, SUBACCDEBIT, ACCCREDIT, SUBACCCREDITTYPE, SUBACCCREDITID, SUBACCCREDIT
      </pre>
      
      <h5>Sales taxes item basis method</h5>
      <p>This method is more difficult and slowly than grouping method - invoice basis.</p>
      <p>
        Persistable models that holds sales tax for an item (invoice line):
        PurchaseInvoiceGoodsTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - PurchaseInvoiceLine, not null</li>
          <li>invoiceId - Long, Invoice ID (to improve performance)</li>
        </ul>
        PurchaseInvoiceServiceTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - PurchaseInvoiceLine, not null</li>
          <li>invoiceId - Long, Invoice ID (to improve performance)</li>
        </ul>
        SalesInvoiceGoodsTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - SalesInvoiceLine, not null</li>
          <li>invoiceId - Long, Invoice ID (to improve performance)</li>
        </ul>
        SalesInvoiceServiceTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - SalesInvoiceLine, not null</li>
          <li>invoiceId - Long, Invoice ID (to improve performance)</li>
        </ul>
        Any invoice line can has multiply tax lines in case if multiply sales taxes apply to this goods/service.
        So this is performance unfriendly method.
      </p>
      <p>Service that saves sales/purchase line checks if goods/service taxable, and creates sales tax line for every applied tax.
        This service update sales/purchase line with totalTaxes and taxDescription contains of taxes amount, e.g. "ST7% 12.13, ST5% 10.67"
      </p>
      <p>
      Method "accounting/trade/purchInvSalTaxItemBasis.sql" that calculate purchase sales taxes for item basis method:
      <pre style="white-space: pre-wrap;">
select TAX as TAXID,  sum(ITSTOTAL) as TOTALTAX, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select TAX, ITSTOTAL, FOREIGNTOTALTAXES
  from PURCHASEINVOICEGOODSTAXLINE 
  where REVERSEDID is null and INVOICEID=:INVOICEID

  union all

  select TAX, ITSTOTAL, FOREIGNTOTALTAXES
  from PURCHASEINVOICESERVICETAXLINE 
  where INVOICEID=:INVOICEID
) as ALL_LINES
group by TAX;
      </pre>
        Retrieved data is used to make PurchaseInvoiceTaxLine for each tax.
      </p>
      <p>
      Method "accounting/trade/salesInvSalTaxItemBasis.sql" that calculate sales invoice sales taxes for item basis method:
      <pre style="white-space: pre-wrap;">
select TAX as TAXID,  sum(ITSTOTAL) as TOTALTAX, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select TAX, ITSTOTAL, FOREIGNTOTALTAXES
  from SALESINVOICEGOODSTAXLINE 
  where REVERSEDID is null and INVOICEID=:INVOICEID

  union all

  select TAX, ITSTOTAL, FOREIGNTOTALTAXES
  from SALESINVOICESERVICETAXLINE 
  where INVOICEID=:INVOICEID
) as ALL_LINES
group by TAX;
      </pre>
      Retrieved data is used to make SalesInvoiceTaxLine for each tax.
      </p>

      <h5>Sales taxes invoice basis method</h5>
      <p>This method is more ease and fast than item basis one, so this method is preferred for performance reasons.
        It's preferred also for retail sales.</p>
      <p>
      <p>Service that saves sales/purchase line checks if goods/service taxable update sales/purchase line with
       taxDescription that contains of taxes names, e.g. "ST7%, ST5%", totalTaxes is useless for this method, i.e. line doesn't consist of taxes amount (total = subtotal).
      </p>
      Method "accounting/trade/salesInvSalTaxInvBasis.sql" that retrieve sales invoice data for sales taxes:
      <pre style="white-space: pre-wrap;">
select TAX as TAXID, ITSPERCENTAGE, sum(SUBTOTAL) as TAXABLE, sum(FOREIGNSUBTOTAL) as FOREIGNTAXABLE
from
(
  select INVITEM.TAXCATEGORY as TAXCATEGORY, SUBTOTAL, FOREIGNSUBTOTAL
  from SALESINVOICELINE 
  join INVITEM on INVITEM.ITSID = SALESINVOICELINE.INVITEM
  where SALESINVOICELINE.REVERSEDID is null and SALESINVOICELINE.ITSOWNER=:INVOICEID

  union all

  select SERVICETOSALE.TAXCATEGORY as TAXCATEGORY, SUBTOTAL, FOREIGNSUBTOTAL
  from SALESINVOICESERVICELINE 
  join SERVICETOSALE on SERVICETOSALE.ITSID = SALESINVOICESERVICELINE.SERVICE
  where SALESINVOICESERVICELINE.ITSOWNER=:INVOICEID
) as ALL_LINES
join INVITEMTAXCATEGORY on INVITEMTAXCATEGORY.ITSID=TAXCATEGORY
join INVITEMTAXCATEGORYLINE on INVITEMTAXCATEGORYLINE.ITSOWNER=INVITEMTAXCATEGORY.ITSID
group by TAX;
      </pre>
      Retrieved data is used to make SalesInvoiceTaxLine for each tax.
      </p>
      <p>
      Method "accounting/trade/purchInvSalTaxInvBasis.sql" that retrieve purchase invoice data for sales taxes:
      <pre style="white-space: pre-wrap;">
select TAX as TAXID, ITSPERCENTAGE, sum(SUBTOTAL) as TAXABLE, sum(FOREIGNSUBTOTAL) as FOREIGNTAXABLE
from
(
  select INVITEM.TAXCATEGORY as TAXCATEGORY, SUBTOTAL, FOREIGNSUBTOTAL
  from PURCHASEINVOICELINE 
  join INVITEM on INVITEM.ITSID = PURCHASEINVOICELINE.INVITEM
  where PURCHASEINVOICELINE.REVERSEDID is null and PURCHASEINVOICELINE.ITSOWNER=:INVOICEID

  union all

  select SERVICEPURCHASED.TAXCATEGORY as TAXCATEGORY, SUBTOTAL, FOREIGNSUBTOTAL
  from PURCHASEINVOICESERVICELINE 
  join SERVICEPURCHASED on SERVICEPURCHASED.ITSID = PURCHASEINVOICESERVICELINE.SERVICE
  where PURCHASEINVOICESERVICELINE.ITSOWNER=:INVOICEID
) as ALL_LINES
join INVITEMTAXCATEGORY on INVITEMTAXCATEGORY.ITSID=TAXCATEGORY
join INVITEMTAXCATEGORYLINE on INVITEMTAXCATEGORYLINE.ITSOWNER=INVITEMTAXCATEGORY.ITSID
group by TAX;
      </pre>
      Retrieved data is used to make PurchaseInvoiceTaxLine for each tax.
      </p>

      <h5>Retrieve invoice totals</h5>
      <p>
      Method "accounting/trade/salesInvoiceTotals.sql" that retrieve sales invoice totals for both item and invoice basis methods:
      <pre style="white-space: pre-wrap;">
select sum(SUBTOTAL) as SUBTOTAL, sum(TOTALTAXES) as TOTALTAXES, sum(FOREIGNSUBTOTAL) as FOREIGNSUBTOTAL, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select SUBTOTAL, 0 as TOTALTAXES, FOREIGNSUBTOTAL, 0 as FOREIGNTOTALTAXES
  from SALESINVOICELINE 
  where SALESINVOICELINE.REVERSEDID is null and SALESINVOICELINE.ITSOWNER=:ITSOWNER

  union all

  select SUBTOTAL, 0 as TOTALTAXES, FOREIGNSUBTOTAL, 0 as FOREIGNTOTALTAXES
  from SALESINVOICESERVICELINE 
  where SALESINVOICESERVICELINE.ITSOWNER=:ITSOWNER

  union all

  select 0 as SUBTOTAL, ITSTOTAL as TOTALTAXES, 0 as FOREIGNSUBTOTAL, FOREIGNTOTALTAXES
  from SALESINVOICETAXLINE 
  where SALESINVOICETAXLINE.ITSOWNER=:ITSOWNER
) as ALL_LINES;
      </pre>
      </p>
      <p>
      Method "accounting/trade/purchaseInvoiceTotals.sql" that retrieve purchase invoice totals for both item and invoice basis methods:
      <pre style="white-space: pre-wrap;">
select sum(SUBTOTAL) as SUBTOTAL, sum(TOTALTAXES) as TOTALTAXES, sum(FOREIGNSUBTOTAL) as FOREIGNSUBTOTAL, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select SUBTOTAL, 0 as TOTALTAXES, FOREIGNSUBTOTAL, 0 as FOREIGNTOTALTAXES
  from PURCHASEINVOICELINE 
  where PURCHASEINVOICELINE.REVERSEDID is null and PURCHASEINVOICELINE.ITSOWNER=:ITSOWNER

  union all

  select SUBTOTAL, 0 as TOTALTAXES, FOREIGNSUBTOTAL, 0 as FOREIGNTOTALTAXES
  from PURCHASEINVOICESERVICELINE 
  where PURCHASEINVOICESERVICELINE.ITSOWNER=:ITSOWNER

  union all

  select 0 as SUBTOTAL, ITSTOTAL as TOTALTAXES, 0 as FOREIGNSUBTOTAL, FOREIGNTOTALTAXES
  from PURCHASEINVOICETAXLINE 
  where PURCHASEINVOICETAXLINE.ITSOWNER=:ITSOWNER
) as ALL_LINES;
      </pre>
      </p>
      
    </section>

  </body>

</document>
