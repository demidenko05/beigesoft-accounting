<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft™ Accounting. Sales tax specification.</title>
  </properties>

  <body>

    <!-- The body of the document contains a number of sections -->
    <section name="Beigesoft™ Accounting. Sales tax specification.">

      <h4>Sales taxes common.</h4>

      <p>Sales taxes imposed on the buyer that seller must collect and remit to tax revenue authorities.
        This is in case when buyer that bought goods/service "is in the country/state where this sales taxes must be paid".
        Foreigners travelers can refund sales taxes when they leaves the country. E-Commerce is still the growing sphere business that often dials with foreigner buyers that bought goods in a WEB-shop
        and have delivered them by mail. In that case overseas (foreigner) buyers must not pay "foreign" sales taxes.
        To implements this logic DebtorCreditor has isForeigner property.
        If DebtorCreditor is foreigner then sales taxes will be omitted for both sales (foreigner buyers) and purchase (foreigner vendors).
        If you bought a merchandise from overseas then you have not to pay "foreign" sales taxes,
        but you usually have to pay "native" sales taxes as if you bought this merchandise from the nearest shop.
        If vendor in purchase invoice is marked as "foreigner" then sales taxes (native) will be omitted. 
        Services Utl(Purchase/Sales)GoodsServiceLine/Prc(Purchase/Sales)(Invoice/Return)(Service)LineSave implements "omitting taxes if customer/vendor is foreign".
      </p>
      
      <h4>Overseas, overstate sales.</h4>
      <p>When you sell merchandise to buyer in other country, then buyer buyer have not to pay sales taxes of your country, but buyer have to pay sales taxes of its country.
        Post office can charge local sales taxes then buyer takes its merchandise. But if you has branch in foreign country, then you must charge, collect and pay foreign sales taxes by yourself.
        In USA it applies for other-state sales and it depends of merchandise type (e.g. car), and this may applies for sellers that have not "foreign-state" branch.
        So, the same merchandise may has multiply tax methods:
        <ul>
          <li>local sales (without over-country/state delivering), even though for foreign tourists - local sales taxes must be charged</li>
          <li>local sales (without over-country/state delivering), and buyer has proof of tax exemptions (e.g. foreign tourist's passport) - local sales taxes must not be charged. This is "in theory" case.</li>
          <li>sales with delivering to a destination where other taxes apply for the merchandise and you have not to charge, collect and remit any sales taxes (foreign post office or tax authority do it).</li>
          <li>sales with delivering to a destination where other taxes apply for the merchandise and you have to charge, collect and remit them.</li>
          <li>sales with delivering to a destination where "foreign sales taxes" not apply to the merchandise and you have to charge, collect and remit origin sales taxes.</li>
        </ul>
        Local authority (even though in a small town) may introduce their own sales taxes, e.g. sales tax 2.235% when you sold merchandise in "town Hill".
        In this way, sales taxes may be different in the same region (state).
      </p>
      <p>If a buyer is a reseller, and it bought merchandise for resale, then sales taxes may be omitted (according the law), e.g. this is applied in USA.</p>
      <p>
        The same invoice may consist of merchandises with different tax methods, e.g. you sold car and chair to overstate buyer, and origin taxes will applied for car,
        for chair - foreign state taxes (this is example for USA).
      </p>
      <p>Use "Customer.isForeigner" method for completely omitting sales taxes.</p>
      <p>To implements "sales taxes depends of buyer's destination", persistable models product/service - InvItem,
        ServiceToSale, ServicePurchased have destinationTaxes lines of type DestTax[Goods/ServSel/ServPurch]Ln:
        <ul>
          <li>APersistableBaseVersion fields</li>
          <li>itsOwner - InvItem/ServiceToSale/ServicePurchased, not-null</li>
          <li>taxDestination - TaxDestination, not null</li>
          <li>taxCategory - InvItemTaxCategory, null if no taxes for this location</li>
        </ul>
        product/service taxCategory means origin (local) taxes.
      </p>
      <p>Cause taxes may be the same for all places (districts) in a region (many ZIP codes but taxes are the same) it's used TaxDestination model:
      <ul>
        <li>APersistableBaseHasNameVersion fields</li>
        <li>salTaxRoundMode - RoundingMode, HALF_UP default</li>
        <li>salTaxUseAggregItBas - Boolean, use aggregate tax rate or only tax for item basis method, false default, but this method is mostly used</li>
        <li>salTaxIsInvoiceBase - Boolean, use invoice basis method, false default</li>
      </ul>
      For many countries there is only sales tax method inside whole country.
      DebtorCreditor has taxDestination field (TaxDestination) to find and apply destination taxes (tax category).
      If customer has "tax destination", then for every item will be searching matching "tax destination line", if found, then it will be used and it could be with empty tax category (null),
      otherwise item.taxCategory will be used (it may be empty). Anyway, will be used rounding method, use aggregate rate and is invoice basis from customer's "tax destination".
      Invoice line has property "tax category", i.e. applied origin or destination tax category.
      </p>
      <p>If you have branch in foreign country, then you have to collect and remit foreign sales taxes and you usually have to pay all others foreign taxes and do accounting by using foreign rules (foreign language, currency, etc).
        That is "tax destination" method is useful only inside a country where sales taxes depend of buyer's destination place (state, province, district, etc.).
      </p>

      <h4>Using tax destination method in an invoice. Omitting taxes is off (Customer->"is foreigner" is false).</h4>
      <p>1. <b>Sales</b>. If customer has tax destination, then "reveal tax category" button will appeared when invoice line's item has been changed.
        When user push this button, then service will return appropriative tax category, then button will disappeared.
      </p>
      <p>If customer has no tax destination, then item's tax category will be used for each line, i.e. when user select item in picker, then its tax category will be selected automatically.</p>
      <p>User can't change tax category and tax amount.</p>
      <p>2. <b>Purchase</b>. The same rules will applied, except user can change tax amount.
      Service will calculate tax amount according tax category and other applied tax methods, if amount is different, then it reports this in the line's description.</p>
      <p>In case of multi-taxes without aggregate rate user can't use "taxes included in price method" and it can't preview tax amount in the "invoice line form".</p>
      <p>Sales and purchase returns use tax category from origin invoice (TODO sales return)</p>

      <h4>Tax calculation methods.</h4>
      <p>
        Service that saves invoice line, will calculates tax according given tax category (independent on form amount).
        Server side calculation policy (for invoice line):
        <ul>
          <li>getting from user's form price and quantity</li>
          <li>getting from DB if price inclusive of taxes</li>
          <li>getting from DB tax method</li>
          <li>calculates line/invoice totals, subtotals, taxes</li>
        </ul>
      </p>
      <p>
        Purchase invoice calculation taxes policy (for invoice line, item basis):
        <ul>
          <li>getting from DB item tax method, if taxes applied then calculates with form's tax amount:</li>
          <li>getting from DB if price inclusive of taxes</li>
          <li>getting from user's form price, quantity, total taxes</li>
          <li>calculates for line totals, subtotals, for invoice totals, subtotals, taxes</li>
        </ul>
        For purchase user can change tax amount in form, then saving service will use exactly that amount.
        For invoice basis method, user can edit total tax lines.
        This is because tax amount must be the same as in received purchase invoice.
      </p>
      <p>There are two calculation methods - tax due on a transaction on an item or an invoice basis.
        These methods give different results:
<pre style="white-space: pre-wrap;">
round(2.244 + 2.244) != round(2.244) + round(2.244);
4.49 != 4.48;
</pre>
        To implements this AccSettings has property "salTaxIsInvoiceBase" of type Boolean, default false (item basis).
      </p>
      <p>>
        Common rounding method is Half-Up to the cent (minimal currency unit).
        To implements sales tax rounding mode AccSettings has property "salTaxRoundMode" of type java.math.RoundingMode.
        Beige-Accounting uses AccSettings.taxPrecision as number of decimal places for rounding tax.
      </p>

      <h4>Price inclusive of taxes</h4>
      <p>In case of only tax or aggregate tax rate, price inclusive of taxes may be used.
        The equation of tax amount extraction is:
<pre style="white-space: pre-wrap;">
  price without taxes = price with taxes / (1 + tax percent/100)
  taxes = price with taxes - price without taxes
  
  example: tax rate = 20%, price with taxes = 120:
  price without taxes = 120 / 1.2 = 100
  taxes = 120 - 100 = 20
</pre>
      </p>
      <p>Persistable models SalesInvoice and PurchaseInvoice has property "priceIncTax", false default</p>
            
      <h4>Tax due WHEN methods.</h4>
      <p>There are two WHEN methods - cash and accrual. Cash method is seldom used, it is "headacheful" method.
        Beigesoft™ Accounting has implemented both these methods.
      </p>

      <h4>Base and accounting data models.</h4>
      <p>Account itsId="SALES_TAX_PAYABLE", name="Sales Tax payable", normalBalanceType=CREDIT itsNumber="2310"
      Subaccounts - Tax</p>
      <p>Account itsId="SALES_TAX_RECIVABLE", name="Sales Tax recivable", normalBalanceType=DEBIT itsNumber="1310"
      Subaccounts - Tax</p>
      <p>Persistable model Tax consist of:
        <ul>
          <li>Subaccount fields  implements IHasTypeCode.</li>
          <li>expense - Expense not null</li>
          <li>itsPercentage - BigDecimal not null</li>
          <li>plusAmount - BigDecimal not null</li>
          <li>dueMethod - EDueMethod ACCURAL/CASH not null</li>
          <li>itsType - ETaxType INCOME_TAX/SALES_TAX_INITEM/SALES_TAX_OUTITEM/EMPLOYMENT_TAX_EMPLOYEE/EMPLOYMENT_TAX_EMPLOYER/OTHER_TAX, not null</li>
        </ul>
        constTypeCode = 2003
      </p>
      <p>Persistable model TaxUsed:
        <ul>
          <li>ASubaccountUsed fields</li>
          <li>subaccount - Tax, not null</li>
        </ul>
      </p>
      <p>Persistable model InvItemTaxCategory (goods or service tax category):
        <ul>
          <li>APersistableBaseHasName fields</li>
          <li>itsVersion - Version, changed time algorithm cause check dirty of
            calculated from it (derived) records</li>
          <li>List(InvItemTaxCategoryLine) taxes</li>
          <li>taxesDescription - String , uneditable e.g. "NY Sales Tax 10%"</li>
          <li>aggrOnlyPercent - BigDecimal, readonly, consist of only tax percentage (single line) or aggregate tax percent (multi-lines)</li>
        </ul>
        This model used to assign tax or set of taxes for an goods or service e.g. "NY sales tax 6%"
        for pizza hot. For "destination tax" method it may be with empty taxes, i.e. no lines, aggrOnlyPercent=0.
      </p>
      <p>Persistable model InvItemTaxCategoryLine:
        <ul>
          <li>APersistableBaseHasName fields</li>
          <li>itsVersion - Version, changed time algorithm cause check dirty of
            calculated from it (derived) records</li>
          <li>itsOwner - InvItemTaxCategory, Not Null</li>
          <li>tax - Tax, Not Null</li>
          <li>itsPercentage - BigDecimal not null</li>
        </ul>
      </p>
      <p>Persistable model InvItem additionally consist of:
        <ul>
          <li>taxCategory - InvItemTaxCategory, nullable.</li>
        </ul>
      </p>
      <p>Persistable model PurchaseInvoice additionally consist of:
        <ul>
          <li>taxesLines - List&lt;PurchaseInvoiceTaxLine&gt; list of summary sales taxes (if applicable)</li>
        </ul>
      </p>
      <p>Persistable model ADocTaxLine consist of:
        <ul>
          <li>APersistableBase fields</li>
          <li>itsVersion - Long autoincrement algorithm</li>
          <li>reversedId - Long if reversed</li>
          <li>tax - Tax, not null</li>
          <li>itsTotal - BigDecimal, not null</li>
        </ul>
      </p>
      <p>Persistable model ADocTaxLineFc consist of:
        <ul>
          <li>ADocTaxLine fields</li>
          <li>foreignTotalTaxes - BigDecimal,Total tax in foreign currency, if used, in case of domestic sales/purchases (if law allows it)</li>
        </ul>
      </p>
      <p>Persistable model PurchaseInvoiceTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - PurchaseInvoice, not null</li>
          <li>taxableInvBas - BigDecimal, not null, it's 0 if item basis otherwise taxable amount for invoice basis.</li>
          <li>taxableInvBasFc - BigDecimal, not null, it's 0 if item basis otherwise taxable amount in foreign currency for invoice basis.</li>
        </ul>
        This model holds total tax amount for whole document for both item and invoice basis methods.
      </p>
      <p>Persistable model SalesInvoiceTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - SalesInvoice, not null</li>
          <li>taxableInvBas - BigDecimal, not null, it's 0 if item basis otherwise taxable amount for invoice basis.</li>
          <li>taxableInvBasFc - BigDecimal, not null, it's 0 if item basis otherwise taxable amount in foreign currency for invoice basis.</li>
        </ul>
        This model holds total tax amount for whole document for both item and invoice basis methods.
      </p>
      
      <h4>SQL services that make accounting entries:</h4>
      Method "PurInvSalTaxSelfDeductingDbtAccrual":
      "PurchaseInvoice, Debit SalesTaxFromPurchase per Tax."
      Accounting entries source: accounting/journalEntries/PurInvSalTaxSelfDeductingDbtAccrual.sql:
      <pre style="white-space: pre-wrap;">
select 1 as SOURCETYPE, PURCHASEINVOICE.:IDNAME as SOURCEID, PURCHASEINVOICE.ITSDATE,
'SalesTaxFromPurchase' as ACCDEBIT, 2003 as SUBACCDEBITTYPE, TAX.ITSID as SUBACCDEBITID, TAX.ITSNAME as SUBACCDEBIT, sum(PURCHASEINVOICETAXLINE.ITSTOTAL) as DEBIT,
null as ACCCREDIT, null as SUBACCCREDITTYPE, null as SUBACCCREDITID, null as SUBACCCREDIT, 0 as CREDIT
from PURCHASEINVOICETAXLINE
join PURCHASEINVOICE on PURCHASEINVOICE.ITSID = PURCHASEINVOICETAXLINE.ITSOWNER
join TAX on TAX.ITSID = PURCHASEINVOICETAXLINE.TAX
where PURCHASEINVOICETAXLINE.REVERSEDID is null and PURCHASEINVOICE.REVERSEDID is null and HASMADEACCENTRIES = 0 and TAX.ITSTYPE in (1,2) and TAX.DUEMETHOD=0 :WHEREADD
group by SOURCETYPE, SOURCEID, ITSDATE, ACCDEBIT, SUBACCDEBITTYPE, SUBACCDEBITID, SUBACCDEBIT, ACCCREDIT, SUBACCCREDITTYPE, SUBACCCREDITID, SUBACCCREDIT
      </pre>

      <p>Persistable model SalesInvoiceTaxLine consist of:
        <ul>
          <li>ADocTaxLine fields</li>
          <li>itsOwner - SalesInvoice, not null</li>
        </ul>
      </p>
      Method "SalInvSalTaxPayCrdtAccrual":
      "SalesInvoice, Credit SalesTaxPay per Tax."
      Accounting entries source: accounting/journalEntries/SalInvSalTaxPayCrdtAccrual.sql:
      <pre style="white-space: pre-wrap;">
select 2 as SOURCETYPE, SALESINVOICE.:IDNAME as SOURCEID, SALESINVOICE.ITSDATE,
null as ACCDEBIT, null as SUBACCDEBITTYPE, null as SUBACCDEBITID, null as SUBACCDEBIT, 0 as DEBIT,
'SalesTaxPay' as ACCCREDIT, 2003 as SUBACCCREDITTYPE, TAX.ITSID as SUBACCCREDITID, TAX.ITSNAME as SUBACCCREDIT, sum(SALESINVOICETAXLINE.ITSTOTAL) as CREDIT
from SALESINVOICETAXLINE
join SALESINVOICE on SALESINVOICE.ITSID = SALESINVOICETAXLINE.ITSOWNER
join TAX on TAX.ITSID = SALESINVOICETAXLINE.TAX
where SALESINVOICETAXLINE.REVERSEDID is null and SALESINVOICE.REVERSEDID is null and HASMADEACCENTRIES = 0 and TAX.ITSTYPE in (1,2) and TAX.DUEMETHOD = 0 :WHEREADD
group by SOURCETYPE, SOURCEID, ITSDATE, ACCDEBIT, SUBACCDEBITTYPE, SUBACCDEBITID, SUBACCDEBIT, ACCCREDIT, SUBACCCREDITTYPE, SUBACCCREDITID, SUBACCCREDIT
      </pre>
      
      <h4>Sales taxes item basis method</h4>
      <p>This method is more difficult and slowly than grouping method - invoice basis.
      In case of aggregate tax, this is fast method.
      </p>
      <p>
        <b>Non-aggregate method (NAM) implementation</b>
      </p>
      <p>
        Persistable models that holds sales tax for an item (invoice line) :
        PurchaseInvoiceGoodsTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - PurchaseInvoiceLine, not null</li>
          <li>invoiceId - Long, Invoice ID (to improve performance)</li>
        </ul>
        PurchaseInvoiceServiceTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - PurchaseInvoiceLine, not null</li>
          <li>invoiceId - Long, Invoice ID (to improve performance)</li>
        </ul>
        SalesInvoiceGoodsTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - SalesInvoiceLine, not null</li>
          <li>invoiceId - Long, Invoice ID (to improve performance)</li>
        </ul>
        SalesInvoiceServiceTaxLine consist of:
        <ul>
          <li>ADocTaxLineFc fields</li>
          <li>itsOwner - SalesInvoiceLine, not null</li>
          <li>invoiceId - Long, Invoice ID (to improve performance)</li>
        </ul>
        Any invoice line can has multiply tax lines in case if multiply sales taxes apply to this goods/service.
        So this is performance unfriendly method.
      </p>
      <p>Service that saves sales/purchase line checks if goods/service taxable, and creates sales tax line for every applied tax.
        This service update sales/purchase line with totalTaxes and taxDescription contains of taxes amount, e.g. "ST7% 12.13, ST5% 10.67"
      </p>
      <p>
      Method "accounting/trade/purchInvSalTaxItemBasis.sql" that calculate purchase sales taxes for item basis method (NAM):
      <pre style="white-space: pre-wrap;">
select TAX as TAXID,  sum(ITSTOTAL) as TOTALTAX, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select TAX, ITSTOTAL, FOREIGNTOTALTAXES
  from PURCHASEINVOICEGOODSTAXLINE 
  where REVERSEDID is null and INVOICEID=:INVOICEID

  union all

  select TAX, ITSTOTAL, FOREIGNTOTALTAXES
  from PURCHASEINVOICESERVICETAXLINE 
  where INVOICEID=:INVOICEID
) as ALL_LINES
group by TAX;
      </pre>
        Retrieved data is used to make PurchaseInvoiceTaxLine for each tax.
      </p>
      <p>
      Method "accounting/trade/salesInvSalTaxItemBasis.sql" that calculate sales invoice sales taxes for item basis method (NAM):
      <pre style="white-space: pre-wrap;">
select TAX as TAXID,  sum(ITSTOTAL) as TOTALTAX, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select TAX, ITSTOTAL, FOREIGNTOTALTAXES
  from SALESINVOICEGOODSTAXLINE 
  where REVERSEDID is null and INVOICEID=:INVOICEID

  union all

  select TAX, ITSTOTAL, FOREIGNTOTALTAXES
  from SALESINVOICESERVICETAXLINE 
  where INVOICEID=:INVOICEID
) as ALL_LINES
group by TAX;
      </pre>
      Retrieved data is used to make SalesInvoiceTaxLine for each tax.
      </p>

      <h4>Sales taxes invoice basis method</h4>
      <p>This method is more ease and fast than item basis one, so this method is preferred for performance reasons.
        It's preferred also for retail sales.</p>
      <p>
      <p>Service that saves sales/purchase line checks if goods/service taxable update sales/purchase line with
       taxDescription that contains of taxes names, e.g. "ST7%, ST5%", totalTaxes is useless for this method, i.e. line doesn't consist of taxes amount (total = subtotal).
      </p>
      Method "accounting/trade/salesInvSalTaxInvBasis.sql" that retrieve sales invoice data for sales taxes:
      <pre style="white-space: pre-wrap;">
select TAX as TAXID, ITSPERCENTAGE, sum(SUBTOTAL) as TAXABLE, sum(FOREIGNSUBTOTAL) as FOREIGNTAXABLE
from
(
  select INVITEM.TAXCATEGORY as TAXCATEGORY, SUBTOTAL, FOREIGNSUBTOTAL
  from SALESINVOICELINE 
  join INVITEM on INVITEM.ITSID = SALESINVOICELINE.INVITEM
  where SALESINVOICELINE.REVERSEDID is null and SALESINVOICELINE.ITSOWNER=:INVOICEID

  union all

  select SERVICETOSALE.TAXCATEGORY as TAXCATEGORY, SUBTOTAL, FOREIGNSUBTOTAL
  from SALESINVOICESERVICELINE 
  join SERVICETOSALE on SERVICETOSALE.ITSID = SALESINVOICESERVICELINE.SERVICE
  where SALESINVOICESERVICELINE.ITSOWNER=:INVOICEID
) as ALL_LINES
join INVITEMTAXCATEGORY on INVITEMTAXCATEGORY.ITSID=TAXCATEGORY
join INVITEMTAXCATEGORYLINE on INVITEMTAXCATEGORYLINE.ITSOWNER=INVITEMTAXCATEGORY.ITSID
group by TAX;
      </pre>
      Retrieved data is used to make SalesInvoiceTaxLine for each tax.
      </p>
      <p>
      Method "accounting/trade/purchInvSalTaxInvBasis.sql" that retrieve purchase invoice data for sales taxes:
      <pre style="white-space: pre-wrap;">
select TAX as TAXID, ITSPERCENTAGE, sum(SUBTOTAL) as TAXABLE, sum(FOREIGNSUBTOTAL) as FOREIGNTAXABLE
from
(
  select INVITEM.TAXCATEGORY as TAXCATEGORY, SUBTOTAL, FOREIGNSUBTOTAL
  from PURCHASEINVOICELINE 
  join INVITEM on INVITEM.ITSID = PURCHASEINVOICELINE.INVITEM
  where PURCHASEINVOICELINE.REVERSEDID is null and PURCHASEINVOICELINE.ITSOWNER=:INVOICEID

  union all

  select SERVICEPURCHASED.TAXCATEGORY as TAXCATEGORY, SUBTOTAL, FOREIGNSUBTOTAL
  from PURCHASEINVOICESERVICELINE 
  join SERVICEPURCHASED on SERVICEPURCHASED.ITSID = PURCHASEINVOICESERVICELINE.SERVICE
  where PURCHASEINVOICESERVICELINE.ITSOWNER=:INVOICEID
) as ALL_LINES
join INVITEMTAXCATEGORY on INVITEMTAXCATEGORY.ITSID=TAXCATEGORY
join INVITEMTAXCATEGORYLINE on INVITEMTAXCATEGORYLINE.ITSOWNER=INVITEMTAXCATEGORY.ITSID
group by TAX;
      </pre>
      Retrieved data is used to make PurchaseInvoiceTaxLine for each tax.
      </p>

      <h4>Retrieve invoice totals</h4>
      <p>
      Method "accounting/trade/salesInvoiceTotals.sql" that retrieve sales invoice totals for both item and invoice basis methods:
      <pre style="white-space: pre-wrap;">
select sum(SUBTOTAL) as SUBTOTAL, sum(TOTALTAXES) as TOTALTAXES, sum(FOREIGNSUBTOTAL) as FOREIGNSUBTOTAL, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select SUBTOTAL, 0 as TOTALTAXES, FOREIGNSUBTOTAL, 0 as FOREIGNTOTALTAXES
  from SALESINVOICELINE 
  where SALESINVOICELINE.REVERSEDID is null and SALESINVOICELINE.ITSOWNER=:ITSOWNER

  union all

  select SUBTOTAL, 0 as TOTALTAXES, FOREIGNSUBTOTAL, 0 as FOREIGNTOTALTAXES
  from SALESINVOICESERVICELINE 
  where SALESINVOICESERVICELINE.ITSOWNER=:ITSOWNER

  union all

  select 0 as SUBTOTAL, ITSTOTAL as TOTALTAXES, 0 as FOREIGNSUBTOTAL, FOREIGNTOTALTAXES
  from SALESINVOICETAXLINE 
  where SALESINVOICETAXLINE.ITSOWNER=:ITSOWNER
) as ALL_LINES;
      </pre>
      </p>
      <p>
      Method "accounting/trade/purchaseInvoiceTotals.sql" that retrieve purchase invoice totals for both item and invoice basis methods:
      <pre style="white-space: pre-wrap;">
select sum(SUBTOTAL) as SUBTOTAL, sum(TOTALTAXES) as TOTALTAXES, sum(FOREIGNSUBTOTAL) as FOREIGNSUBTOTAL, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select SUBTOTAL, 0 as TOTALTAXES, FOREIGNSUBTOTAL, 0 as FOREIGNTOTALTAXES
  from PURCHASEINVOICELINE 
  where PURCHASEINVOICELINE.REVERSEDID is null and PURCHASEINVOICELINE.ITSOWNER=:ITSOWNER

  union all

  select SUBTOTAL, 0 as TOTALTAXES, FOREIGNSUBTOTAL, 0 as FOREIGNTOTALTAXES
  from PURCHASEINVOICESERVICELINE 
  where PURCHASEINVOICESERVICELINE.ITSOWNER=:ITSOWNER

  union all

  select 0 as SUBTOTAL, ITSTOTAL as TOTALTAXES, 0 as FOREIGNSUBTOTAL, FOREIGNTOTALTAXES
  from PURCHASEINVOICETAXLINE 
  where PURCHASEINVOICETAXLINE.ITSOWNER=:ITSOWNER
) as ALL_LINES;
      </pre>
      </p>
      
      <h4>Due on invoice basis, taxes per item</h4>
      <p>When you use "invoice basis" method, then taxes per invoice line is ambiguous thing,  
        e.g. two lines 56.67USD each and tax 11% give invoice basis tax 12.47USD, so what we have to do:
<pre style="white-space: pre-wrap;">
line#  price  taxes  total
1.     56.67  6.23   62.90
2.     56.67  6.24   62.91  ?

OR?

line#  price  taxes  total
1.     56.67  6.24   62.91  ?
2.     56.67  6.23   62.90
</pre>
      </p>
      <p>Buyer can claims sales tax refund, but it's about tax in an invoice, not in a line.
        It must be a law that instructs about this - is it needs to show taxes in lines and how to do it (calculate it depending of invoice total).
      </p>

      <h4>Multi sales taxes. Aggregate tax rate for due on item basis method.</h4>
      <p>In case of multi sales taxes per item you can (or must according the law) use this method.</p>
      <p>This method is useful only for "due on item basis" method. 
        Aggregate tax rate for multi-taxes gives different tax result (against "non-aggregate").
        For example tax1=11%, tax2=1.6%, tax3=3.3% for two lines (4.56USD and 51.13USD):
<pre style="white-space: pre-wrap;">
A.non-aggregate:
item	price	tax1	tax2	tax3	total	t.tax
1	    4.56	0.5	  0.07	0.15	5.28	0.72
2	    53.13	5.84	0.85	1.75	61.57	8.44
total taxes 9.16

B.aggregate tax (15.9%):
item	price	atax	total
1	    4.56	0.73	5.29
2	    53.13	8.45	61.58
aggregate tax total 9.18
</pre>
The difference is 1 cent for each line. Difference is 2 cents for totals.
      </p>
      <p>
This is performance friendly method, cause no need to keep multiply tax entries for each invoice line.
      </p>
      <p>This method allows to implement "taxes are included in price" with "no problems".</p>
      <p>Total taxes are calculated from total of aggregated tax, for example above:
<pre style="white-space: pre-wrap;">
tax1 = 9.18 * 0.11 / 0.159 = 6.35
tax2 = 9.18 * 0.016 / 0.159 = 0.92
tax3 = 9.18 - (9.35 + 0.92) = 1.91
</pre>
To prevent difference between total aggregate from lines and total taxes cause grouping rounding error,
the last tax total line is the rest of aggregate tax.
      </p>
      <p>Property AccSettings.salTaxUseAggregItBas (use aggregate tax rate or only tax for item basis method) is used to switch this method, default is false.
      </p>
      <p><b>Implementation of aggregate tax rate method (item basis)</b></p>
      <p>Service that saves invoice line calculates total line's tax by using aggregate tax rate</p>
      <p>Method "accounting/trade/purchInvSalTaxItBasAggr.sql" that retrieve aggregate total taxes from purchase invoice:
      <pre style="white-space: pre-wrap;">
select TAXCATEGORY, sum(TOTALTAXES) as TOTALTAXES, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select INVITEM.TAXCATEGORY as TAXCATEGORY, TOTALTAXES, FOREIGNTOTALTAXES
  from PURCHASEINVOICELINE 
  join INVITEM on INVITEM.ITSID=PURCHASEINVOICELINE.INVITEM
  where PURCHASEINVOICELINE.REVERSEDID is null and INVITEM.TAXCATEGORY is not null and PURCHASEINVOICELINE.ITSOWNER=:INVOICEID

  union all

  select SERVICEPURCHASED.TAXCATEGORY as TAXCATEGORY, TOTALTAXES, FOREIGNTOTALTAXES
  from PURCHASEINVOICESERVICELINE 
  join SERVICEPURCHASED on SERVICEPURCHASED.ITSID=PURCHASEINVOICESERVICELINE.SERVICE
  where SERVICEPURCHASED.TAXCATEGORY is not null and PURCHASEINVOICESERVICELINE.ITSOWNER=:INVOICEID
) as ALL_LINES
group by TAXCATEGORY;
      </pre>
</p>
      <p>Method "accounting/trade/salInvSalTaxItBasAggr.sql" that retrieve aggregate total taxes from sales invoice:
      <pre style="white-space: pre-wrap;">
select TAXCATEGORY, sum(TOTALTAXES) as TOTALTAXES, sum(FOREIGNTOTALTAXES) as FOREIGNTOTALTAXES
from
(
  select INVITEM.TAXCATEGORY as TAXCATEGORY, TOTALTAXES, FOREIGNTOTALTAXES
  from SALESINVOICELINE 
  join INVITEM on INVITEM.ITSID=SALESINVOICELINE.INVITEM
  where SALESINVOICELINE.REVERSEDID is null and INVITEM.TAXCATEGORY is not null and SALESINVOICELINE.ITSOWNER=:INVOICEID

  union all

  select SERVICETOSALE.TAXCATEGORY as TAXCATEGORY, TOTALTAXES, FOREIGNTOTALTAXES
  from SALESINVOICESERVICELINE 
  join SERVICETOSALE on SERVICETOSALE.ITSID=SALESINVOICESERVICELINE.SERVICE
  where SERVICETOSALE.TAXCATEGORY is not null and SALESINVOICESERVICELINE.ITSOWNER=:INVOICEID
) as ALL_LINES
group by TAXCATEGORY;
      </pre>
</p>
    </section>

  </body>

</document>
