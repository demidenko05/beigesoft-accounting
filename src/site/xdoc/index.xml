<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft™ projects overview</title>
  </properties>

  <body>

    <!-- The body of the document contains a number of sections -->
    <section name="Beige-Software overview">

      <p><a href="https://www.facebook.com/Beigesoft-Accounting-All-In-One-401150900677249">Facebook</a></p>

            
      <p>Keywords: Java open source software, free accounting software, Java reporting tools, PDF creator, Java PDF library, Jetty for Android, Java ORM library, JSP, JSTL, JSON, AJAX.</p>
      
      <h3>Products:</h3>

      <h4>Beigesoft™ Accounting</h4>
      <p>This application never waste your time because of:
        <p><b>It provides sufficient functionality:</b></p>
        <ul>
          <li>Double entry accounting system including ledger and balance reports.</li>
          <li>COGS FIFO/LIFO automatically for sales, sales returns, inventory losses.</li>
          <li>Automatically sales taxes accounting entries for sales, purchases and their returns.</li>
          <li>Sales tax methods: item/invoice basis, destination-based, aggregate rate, price inclusive of tax.</li>
          <li>Prepayments/payments tracking for sales/purchases (including invoices with foreign currency).</li>
          <li>Payroll - automatically taxes calculation (by percentage tax table method) and accounting entries.</li>
          <li>Manufacturing - automatically cost calculation from used materials and direct labor (and other) costs.</li>
          <li>Multi-databases (organizations) for standalone versions which use SQlite database.</li>
          <li>Embed Web-Store</li>
          <li>and more.</li>
        </ul>
        * You can check functionality by reading this documentation (without installation).
        <p><b>It's reliable software:</b></p>
        <ul>
          <li>All its parts are under truly free licenses.</li>
          <li>It's open source software, so fixing an error or customizing is not a problem.</li>
          <li>It will never be downgraded or disappeared. You always can find it (binary and source code) in Central Maven Repository.</li>
          <li>It's high performance oriented software. Cloud versions will never be slow even on weak computers.</li>
        </ul>
      </p>
      <p>Beigesoft™ Accounting is JEE-WEB based Accounting software.</p>
      <p>
        It works as:
        <ul>
          <li>Standalone WEB-application with private WEB-server A-Jetty for standard Java (MS Windows, Mac, UNIX like OS...).</li>
          <li>Standalone WEB-application with private WEB-server A-Jetty for Android.</li>
          <li>Standard JEE web-application on any JEE server (cloud).</li>
        </ul>
      </p>
      <p>It requires Google Chrome, Opera or Chromium browser (html5-dialog ready).</p>
      <p><a href="privacypolicy-en.html">See Beigesoft™ Accounting Privacy Policy.</a></p>
      <p><a href="beigekeys.html">See Beigesoft™ digital signatures.</a></p>
      <p>
        <a href="bobs-pizza.html">See Beige Accounting Bob's Pizza example.</a>
      </p>
      <p>Since version 1.1.5 Beigesoft™ Accounting standalone versions are always in secure enabled mode,
        that is it uses encrypted (HTTPS) connection, it requires strong password for authorization,
        it also uses encryption (modern algorithm RSA with 2048bit key and 256bit AES) for safe
        file (SQLite databases) exchanging between computers/tablets, e.g. an accountant can send encrypted SQLite database to a business owner, and no one can decrypt it except this owner.
      </p>
      <p>
        Beigesoft™ Accounting for MS Windows/Mac/*Nix <b>beigesoft-accountingoio-ajetty.bin.zip</b> and
        cloud version <b>beigesoft-accounting-weboio.war</b> and other products
        you can find in central Maven repository <a href="https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.beigesoft%22">https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.beigesoft%22</a>
        or <a href="https://repo1.maven.org/maven2/org/beigesoft/beigesoft-accountingoio-ajetty/">https://repo1.maven.org/maven2/org/beigesoft/beigesoft-accountingoio-ajetty/</a>
      </p>
      <p>Beigesoft™ Accounting for Android comply rules
        <a href="https://play.google.com/about/privacy-security/personal-sensitive/">https://play.google.com/about/privacy-security/personal-sensitive/</a>,
        so you can find it in Google Play-Store (search "Beigesoft Accounting").</p>
      <p>
        Source code of Beigesoft™ Accounting and other products you can find in <a href="https://github.com/demidenko05">https://github.com/demidenko05</a>
      </p>
      <p>
        Licenses:
        <ul>
          <li>GNU General Public License version 2 - http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html</li>
          <li>The Eclipse Public License, Version 1.0 - http://www.eclipse.org/legal/epl-v10.html</li>
          <li>The Apache Software License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.txt</li>
          <li>CDDL + GPLv2 with classpath exception - https://javaee.github.io/glassfish/LICENSE</li>
          <li>MIT License - https://github.com/twbs/bootstrap/blob/master/LICENSE</li>
          <li>DejaVu fonts by Bitstream - https://dejavu-fonts.github.io/License.html</li>
          <li>SIL OPEN FONT LICENSE Version 1.1 - http://scripts.sil.org/cms/scripts/page.php?item_id=OFL_web</li>
        </ul>
      </p>

        <h4>Beigesoft™ PDF Writer.</h4>
              
        <p>This is light-weight (all JARs size is about 250KB), international friendly and fast PDF writer. This is actually reporting tool. It automatically makes paging, tables (e.g. repeating header on every page).
         It's cross-platform writer - Standard Java and Android.</p>
              
        <p>Benefits:</p>
        <ul>
          <li>It packs TTF font with only used characters. Even DeJaVue.TTF is 800KB, so without packing resulting PDF file is big. Asian languages (with hieroglyphs) TTF files are extremely huge.</li>
          <li>Ready for high load job. Performance test's (thread per invoice) results shows that making 100 invoices (3pages each) takes less than 4 seconds on ordinal notebook. Invoice file size is 26KB cause embed TTF font has only used characters.</li>
          <li>There are not 3-d party libraries. Beigesoft™ Document Writer, Swing/Android graphics libraries, Logger are licensed under truly free GPLv2.</li>
        </ul>
        Although Beigesoft™ PDF Writer hasn't yet implemented graphic charts and other features, and it has no visual editor, it's really enough to create complex black and white (include non-masked RGB images) business reports quickly.
        Visual editor is planned to be the same as MS Word or LibreOffice Writer. Here are PDF files for example:
        <a href="https://docs.google.com/viewer?a=v&amp;pid=sites&amp;srcid=ZGVmYXVsdGRvbWFpbnxiZWlnZXNvZnR3YXJlfGd4OjM3YTU4MWFmNDNiYzZmYjk">Invoice sample</a> <a href="https://docs.google.com/viewer?a=v&amp;pid=sites&amp;srcid=ZGVmYXVsdGRvbWFpbnxiZWlnZXNvZnR3YXJlfGd4OjNhZDczYWU4OWE2MDU3ODQ">Счет-фактура</a> <a href="https://docs.google.com/viewer?a=v&amp;pid=sites&amp;srcid=ZGVmYXVsdGRvbWFpbnxiZWlnZXNvZnR3YXJlfGd4OjE4MTA3ODM1NTg3MTAyNzQ">Платежное поручение</a>

      <h4>A-Jetty</h4>
      <p>A-Jetty is Jetty 9.2 adapted for Android, it can run precompiled JSP/JSTL.</p>
      <p>Features:
          <ul>
          <li>It works on Android Java as well as on standard Java 7+.</li>
          <li>It executes precompiled by A-Tomcat JSP/JSTL.</li>
        </ul>
      </p>
      <p>
        JSP(plus JSTL) is the same WEB-view technology as ASPX, PHP and deprecated ASP. JSP and ASPX are faster than PHP and ASP, because of
        they are compiled into byte-code, which is executed (actually it's compiled on fly into CPU code) by Java VM or DOT.NET. PHP, ASP are text that is interpreted during runtime and it's never be compiled.
        All these technologies are used to build complex WEB-interface quickly.
      </p>
      <p>
        Using JSP(JSTL) allows you to create truly multi-platform WEB-applications cause A-Jetty can run them anywhere (on any operation system).
        The best way of using A-Jetty is using it as embedded server in a standalone WEB-application.
      </p>
      
      <h4>Beigesoft™ ORM</h4>
      <p>Beigesoft™ ORM is lightweight multiplatform (Android Java and standard Java 7+) ORM library.
      </p>
      <p>It supports Postgresql, MySql, H2 and SQlite (adding a new RDBMS is very simple task).</p>
      <p>For mapping it uses standard Java XML properties files.</p>
      <p>It has implemented optimistic locking by version (autoincrement and last changed time).</p>
      <p>Since version 1.1.4 it supports automatically (create, insert, update) complex models e.g. WarehouseRests {WarewouseSite, Item, UnitOfMeasure, quantity} where triple (WarewouseSite, Item, UnitOfMeasure) is composite ID.
        Another example GoodsRating{Goods, rating} where Goods is primary and foreign ID.
      </p>
      <p>
        By default, it retrieves almost full model through 2 level. E.g. an retrieved Invoice has already retrieved Customer(1st level),
        but in this Customer CustomerCategory  (2-nd level) has only ID.
      </p>
      <p>
        You can set the fields required for retrieving or/and updating, and you can set deep level of retrieving owned entities.
        This is very performance friendly features that other ORMs haven't.
        Example of updating customer orders status to BOOKED including optimistic locking:
        <pre style="white-space: pre-wrap;">
String[] fieldsNames = new String[] {"itsId", "itsVersion", "stat"};
List&lt;CustOrder&gt; ords = this.srvOrm.retrieveListWithConditions(pRqVs, CustOrder.class, "where STAT=0 and BUYER=" + pBur.getItsId());
pRqVs.put("fieldsNames", fieldsNames);
for (CustOrder co : ords) {
  co.setStat(EOrdStat.BOOKED);
  getSrvOrm().updateEntity(pRqVs, co);
}
pRqVs.remove("fieldsNames");
        </pre>
        SQL queries will be consist of only required fields.
      </p>
      <p>It hasn't implemented refresh owned entity by invoke getter (there is no lazy retrieving). So you have to invoke explicitly ORM refresh e.g.:
        <pre style="white-space: pre-wrap;">
customerInvoice.getCustomer().setCustomerCategory(getSrvOrm()
  .retrieveEntity(pRqVs, customerInvoice.getCustomer().getCustomerCategory()));
        </pre>
      </p>
      <p>
        It never retrieved owned entities-list, e.g. InvoiceLines, you should do it explicitly:
        <pre style="white-space: pre-wrap;">
SalesInvoiceLine sil = new SalesInvoiceLine();
sil.setItsOwner(salesInvoice);
salesInvoice.setItsLines(getSrvOrm().retrieveListForField(pRqVs, sil, "itsOwner"));
        </pre>
        These lines are retrieved also through 2 level by big SQL query.
      </p>
      <p>Standard ORM use lazy-initialization of model by default. So they retrieve model by several SQL queries
        and JDBC connection is used during whole HTTP request-response. This is no good for performance. Beigesoft™ ORM retrieve 
        a customer invoice with 15 lines by 2 SQL queries (one for body, another for lines) then close connection and pass model to viewer (renderer).
        Standard ORM make 1 SQL request for body, 1 for customer, 1 for lines, 15 for every line goods, 15 for every line unit of measure.
        Two big SQL queries (exactly with joins) is faster than several (33 in this case) small ones. Any RDMBS is optimized (must be) to execute
        big SQL queries that returns a lot of data.
        SQL queries without joins is bad practice that hit performance e.g.:
        <pre style="white-space: pre-wrap;">
select SALESINVOICE.ITSDATE, DEBTORCREDITOR.ITSNAME 
from SALESINVOICE, DEBTORCREDITOR
where SALESINVOICE.ITSID=1 and DEBTORCREDITOR.ITSID=SALESINVOICE.CUSTOMER
        </pre>
      </p>
      <p>
        Beigesoft™ ORM never alter tables, only create new ones, but it has reliable means - invoke upgrade_[new_version].sql script
        when Beigesoft™ ORM is starting. Beigesoft™ ORM requires that database must has ID and VERSION table, this is held in model org.beigesoft.persistable.DatabaseInfo.
        Upgrade script can upgrade tables (alters, insert, updates...) and must set new database version. So task "add DebtorCreditor.specialCategory, not null"
        is trivial for Beigesoft™ ORM, but not for other ORMs:
        <pre style="white-space: pre-wrap;">
alter table DebtorCreditor add column specialCategory integer;
insert into CPECIALCATEGORY  values (1, 'cat A');
...
update DebtorCreditor [for specialCategory]
...
alter table DebtorCreditor alter column spetialCategory integer not null;
update DATABASEINFO set DATABASEVERSION=[new_version], DESCRIPTION='database upgraded' where DATABASEID=[DB_ID];          
        </pre>
      </p>

      <h4>Beigesoft™ WEB.</h4>
      <p>Beigesoft™ WEB is CRUD WEB-application based on JSP, JSTL, JSON, AJAX.</p>
      <p>With it you can build complex WEB interface with no time.
        It renders forms (include entity pickers) and lists of any entity according XML settings. Beigesoft™ Accounting use it.</p>
      <p>It uses Beige-Settings to describe how to render an entity and its fields, e.g. beige-uvd/fieldTypeToFs/wdgNewForm.xml:
        <pre style="white-space: pre-wrap;">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties&gt;
&lt;comment&gt;Correspondence of Java types to widget base names. ORDER is essential, the LAST value will be used&lt;/comment&gt;
&lt;entry key="java.lang.Integer"&gt;inputNumber&lt;/entry&gt;
&lt;entry key="java.lang.Long"&gt;inputNumber&lt;/entry&gt;
&lt;entry key="java.lang.Float"&gt;inputReal&lt;/entry&gt;
&lt;entry key="java.lang.Double"&gt;inputReal&lt;/entry&gt;
&lt;entry key="java.lang.String"&gt;inputString&lt;/entry&gt;
&lt;entry key="java.lang.Boolean"&gt;inputBoolean&lt;/entry&gt;
&lt;entry key="java.util.Date"&gt;inputDateTime&lt;/entry&gt;
&lt;entry key="java.math.BigDecimal"&gt;inputPrice&lt;/entry&gt;
&lt;entry key="java.lang.Enum"&gt;inputEnum&lt;/entry&gt;
&lt;entry key="org.beigesoft.model.IHasName"&gt;inputEntityHasName&lt;/entry&gt;
&lt;entry key="org.beigesoft.accounting.persistable.Account"&gt;inputAccount&lt;/entry&gt;
&lt;entry key="org.beigesoft.accounting.persistable.IDoc"&gt;inputDocument&lt;/entry&gt;
&lt;/properties&gt;
        </pre>
      </p>
      <p>It uses cheap JSON multi-target response created by JSP, for example after a document has been accounted listAfterAccountJon.jsp is:
        <pre style="white-space: pre-wrap;">
&lt;%@ page language="java" contentType="application/json; charset=UTF-8" pageEncoding="UTF-8"%&gt;
&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;
&lt;%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %&gt;
&lt;fmt:setLocale value="${reqVars.localeCurr}" scope="request"/&gt;
&lt;c:set var="namePlaceForm" value="frmMainPlace" scope="request"/&gt;
{"multiTargetResponse":
  [{"nameTarget": "${namePlaceForm}", "content": "",
    "nameTargetParent": null, "javascript": null},
&lt;c:set var="fltOrdPrefix" value="fltordM" scope="request"/&gt;
&lt;c:set var="namePlace" value="lstMainPlace" scope="request"/&gt;
&lt;c:set var="nmRndList" value="listJson" scope="request"/&gt;
&lt;c:if test="${param.javascript == null}"&gt;
  &lt;c:set var="jscrt" value="setVarsNum('${reqVars.decSepv}','${reqVars.decGrSepv}',${reqVars.digInGr});showSuccess('${srvI18n.getMsg(param.msgSuccess, reqVars.lang)}');"/&gt;
&lt;/c:if&gt;
&lt;c:if test="${param.javascript != null}"&gt;
  &lt;c:set var="jscrt" value="setVarsNum('${reqVars.decSepv}','${reqVars.decGrSepv}',${reqVars.digInGr});showSuccess('${srvI18n.getMsg(param.msgSuccess, reqVars.lang)}');${param.javascript}"/&gt;
&lt;/c:if&gt;
&lt;c:import url="/WEB-INF/jsp/list.jsp" varReader="rdEntities" charEncoding="UTF-8"&gt;
   {"nameTarget": "${namePlace}list", "content": "${utlJsp.toJsonStringAndClose(rdEntities)}",
    "nameTargetParent": null, "javascript": "${utlJsp.toJsonString(jscrt)}"}]
}
&lt;/c:import&gt;    
</pre>
        This response clears entity's form, refreshs entity's list and shows successful message.
      </p>

      <h4>Beigesoft™ Replicator.</h4>
      <p>Beigesoft™ Replicator replicates/persists any entity according XML settings and user's requirements into a file or through network (HTTP).
      Right now it has implemented XML format of stored/transferred data. Beigesoft™ Accounting use it to import full database copy with WEB-service and for importing data from tax to market accounting.</p>

      <h4>Beigesoft™ Settings.</h4>
      <p>Beige-Settings helps to make quickly settings for class and its fields with properties XML.
    Instead of create a lot of files to describe every class and its fields it use describing by type, by name,
    e.g. setting "java.lang.Integer"-"INTEGER NOT NULL" will be assigned for every field of this type. Beigesoft™ ORM,
    Beige-WEB, Beige-Replicator use it.</p>

       <h4>Beige-UML</h4>
<p>Beige-UML is an UML diagram editor. It has two user interfaces - ordinary desktop SWING and Android.</p>
<p>Features:</p>
  <ol>
    <li>Supports UML 2.4.1 compliant class diagram, package diagram, object diagram, sequence diagram and use case diagram.</li>
    <li>It generates UML class diagram from Java source.</li>
    <li>It's a doclet that generates standard Javadoc with UML class diagram.</li>
  </ol>
<p>Using Beige-UML to generate Javadocs has a disadvantage - the resulting UML diagrams are PNG files,
  so they are increasing Javadoc files size too much. Beige-UML is planned to be ported into Beigesoft Document Writer,
  and writing to javadocs will be in SVG format (external file or html5 SVG).</p>
<p>This application you can download from <a href="https://repo1.maven.org/maven2/org/beigesoft/beige-uml-swing/">https://repo1.maven.org/maven2/org/beigesoft/beige-uml-swing/</a>
  There <b>beige-uml-swing-[VERSION]-jar-with-dependencies.jar</b> is Swing application.
  Android version you can find in Google Play Store. Its source code you can download from <a href="https://github.com/demidenko05/beige-uml">https://github.com/demidenko05/beige-uml</a></p>
<p>Source of beige-android-demo (demo of Android tree/file-chooser, list-chooser etc.) you can find at <a href="http://sourceforge.net/projects/beigeuml/">http://sourceforge.net/projects/beigeuml/</a></p>
<p> <a href="https://sites.google.com/site/beigesoftware/gettingstartedgui">Beige UML getting started.</a> </p>
            
    <p>
      * Address http://www.beigesoft.org was switched off for security (safety) reasons.
      Any HTML page comes to your browser by passing through several intermediate Internet servers.
      If any intermediate server is affected by harmful software, then it can changes content and injects harmful script into HTML page
      because HTTP is an unencrypted transport.
    </p>
    </section>

  </body>

</document>
