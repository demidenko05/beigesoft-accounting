<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beigesoft projects overview</title>
  </properties>

  <body>

    <!-- The body of the document contains a number of sections -->
    <section name="Beige-Software overview">
      
      <p>If it's slow, then try <a href="https://sites.google.com/site/beigesoftware">https://sites.google.com/site/beigesoftware</a></p>

      <h3>Products:</h3>

      <h4>Beige-Accounting</h4>
            
      <p>Beige Accounting is JEE-WEB based Accounting software.</p>
      <p>
        It works as:
        <ul>
          <li>Standalone web-app on embedded A-Jetty for standard Java (Ms Windows, Mac, Nix...).</li>
          <li>Standalone web-app on embedded A-Jetty on Android.</li>
          <li>Standard JEE web-application on any JEE server (cloud).</li>
        </ul>
      </p>
      <p>It requires Google Chrome, Opera, or Chromium browser (html5-dialog ready).</p>
      <p>
        Features:
        <ul>
          <li>Double entries accounting system include ledger and balance reports.</li>
          <li>COGS FIFO/LIFO perpetual automatically for sales, sales returns, inventory loses.</li>
          <li>Automatically sales taxes accounting entries (a goods may has several sales taxes) for sales, purchase invoice
            and their returns.
          </li>
          <li>Prepayments/payments tracking for sales/purchases.</li>
          <li>Payroll - automatically taxes calculation (by percentage tax table method) and accounting entries.</li>
          <li>Manufacturing - automatically cost calculation from used materials and direct labor (and other) costs.</li>
          <li>Multi-databases (organizations) on standalone web-app version which uses SQlite database.</li>
          <li>and more.</li>
        </ul>
      </p>
      <p>
        <a href="bobs-pizza.html">See Beige Accounting Bob's Pizza example.</a>
      </p>
      <p>
        Beige-Accounting for MS Windows/Mac/*Nix - <b>beige-accounting-ajetty.zip</b>, for Android - <b></b> you can find in <a href="https://sourceforge.net/projects/beige-accounting/">https://sourceforge.net/projects/beige-accounting/</a>
      </p>
      <p>Beige Accounting for Android - <b>beige-accounting-android-1.1.3.apk</b> you can find in central Maven repository <a href="https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.beigesoft%22">https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.beigesoft%22</a>.</p>
      <p>Beige-Accounting doesn't comply new rules <a href="https://play.google.com/about/privacy-security/personal-sensitive/">https://play.google.com/about/privacy-security/personal-sensitive/</a>
        that is sqlite archived non-encrypted databases are stored in "not-secure" place,
        it also doesn't uses encrypted (HTTPS) connection (although A-Jetty is not available through network).
        So Beige-Accounting was unpublished form Play Store, but it still available as APK installation file.
        For security reasons you should not install software from non-trusted sources.
      </p>
      <p>
        Source code of Beige-Accounting you can find in <a href="https://github.com/demidenko05/beige-software">https://github.com/demidenko05/beige-software</a>
      </p>
      <p>Releases you can find in <a href="https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.beigesoft%22">Central Maven Repository: search org.beigesoft.</a></p>
      <p>
        Licenses:
        <ul>
          <li>GNU General Public License version 2 - http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html</li>
          <li>The Eclipse Public License, Version 1.0 - http://www.eclipse.org/legal/epl-v10.html</li>
          <li>The Apache Software License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.txt</li>
        </ul>
      </p>
      <h4>A-Jetty</h4>
      <p>A-Jetty is Jetty 9.2 adapted for Android, it can run precompiled JSP/JSTL.</p>
      <p>Features:
          <ul>
          <li>It can run on Android Java as well as on standard Java 7+.</li>
          <li>It can perform precompiled by A-Tomcat JSP/JSTL.</li>
        </ul>
      </p>
      <p>
        JSP(plus JSTL) is the same WEB-view technology as ASPX, PHP and deprecated ASP. JSP and ASPX are faster than PHP and ASP cause
        they are compiled into byte-code which is performed by Java VM or DOT.NET. PHP, ASP are text that is interpreted during runtime and they are never compiled.
        All these technology used to build complex WEB-interface quickly.
      </p>
      <p>
        Using JSP(JSTL) allow you to create exactly multiplatform WEB-applications cause A-Jetty can run them.
        The best way of using A-Jetty is use it as embedded server in standalone WEB-application.
      </p>
      <p>
        Source code of A-Jetty, A-Tomcat and their dependence A-Javabeans you can find in <a href="https://github.com/demidenko05">https://github.com/demidenko05</a>
      </p>
      <p>Releases of A-Jetty, A-Tomcat and A-Javabeans you can find in <a href="https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.github.demidenko05%22">Central Maven Repository: search com.github.demidenko05.</a></p>
      
      <h4>Beige-ORM</h4>
      <p>Beige-ORM is lightweight multiplatform (Android Java and standard Java 7+) ORM library.
      </p>
      <p>It supports Postgresql, MySql, H2 and SQlite (adding a new RDBMS is very simple task).</p>
      <p>For mapping it use standard Java XML properties files.</p>
      <p>It has implemented optimistic locking by version (autoincrement and last changed time).</p>
      <p>For updating (not inserting) entity with complex ID you have to make WHERE clause with this ID by hand, but it take no time or problems e.g. WarehouseRest with complex ID {itemId, siteId, unitOfMeasureId}:
        <pre style="white-space: pre-wrap;">
    if (wr.getIsNew()) {
      getSrvOrm().insertEntity(wr);
    } else {
      String where = "INVITEM=" + wr.getInvItem().getItsId()
        + " and WAREHOUSESITE=" + wr.getWarehouseSite().getItsId()
           + " and UNITOFMEASURE=" + wr.getUnitOfMeasure().getItsId();
      getSrvOrm().updateEntityWhere(wr, where);
    }
        </pre>
      </p>
      <p>
        It retrieve almost full model through 2 level. E.g. an retrieved Invoice has already retrieved Customer(1st level),
        but in this Customer CustomerCategory  (2-nd level) has only ID.
      </p>
      <p>It hasn't implemented refresh owned entity by invoke getter. So you have to invoke explicitly ORM refresh e.g.:
        <pre style="white-space: pre-wrap;">
    customerInvoice.getCustomer().setCustomerCategory(getSrvOrm()
      .retrieveEntity(customerInvoice.getCustomer().getCustomerCategory()));
        </pre>
      </p>
      <p>
        It never retrieved owned entities-list, e.g. InvoiceLines, you should do it explicitly:
        <pre style="white-space: pre-wrap;">
    customerInvoice.setItsLines(getSrvOrm()
      .retrieveEntityOwnedlist(CustomerInvoiceLine.class,
        CustomerInvoice.class, customerInvoice.getItsId()));
        </pre>
        These lines is retrieved also through 2 level by big SQL query.
      </p>
      <p>Standard ORM use lazy-initialization of model by default. So they retrieve model by several SQL queries
        and JDBC connection used during whole HTTP request-response. This is no good for performance. Beige-ORM retrieve 
        a customer invoice with 15 lines by 2 SQL queries (one for body, another for lines) then close connection and pass model to viewer (renderer).
        Standard ORM make 1 SQL request for body, 1 for customer, 1 for lines, 15 for every line goods, 15 for every line unit of measure.
        Two big SQL queries (exactly with joins) is faster than several (33 in this case) small ones. Any RDMBS is optimized (must be) to perform
        big SQL queries that returns a lot of data.
        SQL queries without joins is bad practice that hit performance e.g.:
        <pre style="white-space: pre-wrap;">
    select SALESINVOICE.ITSDATE, DEBTORCREDITOR.ITSNAME 
    from SALESINVOICE, DEBTORCREDITOR
    where SALESINVOICE.ITSID=1 and DEBTORCREDITOR.ITSID=SALESINVOICE.CUSTOMER
        </pre>
      </p>
      <p>
        Beige-ORM never alter tables, only create new ones, but it has reliable mean - invoke upgrade_[new_version].sql script
        when Beige-ORM is started. Beige-ORM required database must has ID and VERSION table, this is holds in model org.beigesoft.persistable.DatabaseInfo.
        Upgrade script can upgrade tables (alters, insert, updates...) and must set new database version. So task "add DebtorCreditor.spetialCategory, not null"
        is trivial for Beige-ORM, not for standard ORM:
        <pre style="white-space: pre-wrap;">
    alter table DebtorCreditor add column specialCategory integer;
    insert into CPECIALCATEGORY  values (1, 'cat A');
    ...
    update DebtorCreditor [for specialCategory]
    ...
    alter table DebtorCreditor alter column spetialCategory integer not null;
    update DATABASEINFO set DATABASEVERSION=[new_version], DESCRIPTION='database upgraded' where DATABASEID=[DB_ID];          
        </pre>
      </p>

      <h4>Beige-WEB.</h4>
      <p>Beige-WEB is CRUD WEB-application based on JSP, JSTL, JSON, AJAX.</p>
      <p>With it you can build complex WEB interface with no time.
        It renders forms (include entity pickers) and lists of any entity according XML settings. Beige-Accounting use it.</p>
      <p>It uses BeigeSettings to describe how to render an entity and its fields, e.g. beige-uvd/fieldTypeToFs/wdgNewForm.xml:
        <pre style="white-space: pre-wrap;">
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
    &lt;properties&gt;
    &lt;comment&gt;Correspondence of Java types to widget base names. ORDER is essential, the LAST value will be used&lt;/comment&gt;
    &lt;entry key="java.lang.Integer"&gt;inputNumber&lt;/entry&gt;
    &lt;entry key="java.lang.Long"&gt;inputNumber&lt;/entry&gt;
    &lt;entry key="java.lang.Float"&gt;inputReal&lt;/entry&gt;
    &lt;entry key="java.lang.Double"&gt;inputReal&lt;/entry&gt;
    &lt;entry key="java.lang.String"&gt;inputString&lt;/entry&gt;
    &lt;entry key="java.lang.Boolean"&gt;inputBoolean&lt;/entry&gt;
    &lt;entry key="java.util.Date"&gt;inputDateTime&lt;/entry&gt;
    &lt;entry key="java.math.BigDecimal"&gt;inputPrice&lt;/entry&gt;
    &lt;entry key="java.lang.Enum"&gt;inputEnum&lt;/entry&gt;
    &lt;entry key="org.beigesoft.model.IHasName"&gt;inputEntityHasName&lt;/entry&gt;
    &lt;entry key="org.beigesoft.accounting.persistable.Account"&gt;inputAccount&lt;/entry&gt;
    &lt;entry key="org.beigesoft.accounting.persistable.IDoc"&gt;inputDocument&lt;/entry&gt;
    &lt;/properties&gt;
        </pre>
      </p>
      <p>It use cheap JSON multi-target responses created by JSP, for example after document was accounted:
        <pre style="white-space: pre-wrap;">
    &lt;%@ page language="java" contentType="application/json; charset=UTF-8" pageEncoding="UTF-8"%&gt;
    &lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;
    &lt;c:set var="namePlaceForm" value="frmMainPlace" scope="request"/&gt;
    {"multiTargetResponse":
      [{"nameTarget": "${namePlaceForm}", "content": "",
        "nameTargetParent": null, "javascript": null},
    &lt;c:set var="fltOrdPrefix" value="fltordM" scope="request"/&gt;
    &lt;c:set var="namePlace" value="lstMainPlace" scope="request"/&gt;
    &lt;c:set var="showSuccess" value="showSuccess(MSGS['account_successful']);"/&gt;
    &lt;c:set var="nameRendererList" value="listJson" scope="request"/&gt;
    &lt;c:import url="/WEB-INF/jsp/list.jsp" varReader="rdEntities" charEncoding="UTF-8"&gt;
       {"nameTarget": "${namePlace}list", "content": "${utlJsp.toJsonStringAndClose(rdEntities)}",
        "nameTargetParent": null, "javascript": "${utlJsp.toJsonString(showSuccess)}"}]
    }
    &lt;/c:import&gt;  
        </pre>
        This response clear entity form, refresh entity list and show successful message.
      </p>

      <h4>Beige-Replicator.</h4>
      <p>Beige-Replicator replicate/persist any entity according XML settings and user's requirements with a file or network (HTTP).
      Right now it has implemented XML format of stored/transferred data. Beige-Accounting use it to import full database copy with WEB-service.</p>

      <h4>Beige-Settings.</h4>
      <p>Beige-Settings helps to make quickly settings for class and its fields with properties XML.
    Instead of create a lot of files to describe every class and its fields it use describing by type, by name,
    e.g. setting "java.lang.Integer"-"INTEGER NOT NULL" will be assigned for every field of this type. Beige-ORM,
    Beige-WEB, Beige-Replicator use it.</p>
      
      <p>
        Source code of this software you can find also in <a href="https://github.com/demidenko05/beige-software">https://github.com/demidenko05/beige-software</a>
      </p>
      <p>Releases you can find in <a href="https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.beigesoft%22">Central Maven Repository: search org.beigesoft.</a></p>
      
    </section>

  </body>

</document>
